"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[351],{3034:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-e2bbafd8",path:"/blogs/category1/2021/121501.html",title:"AsyncData",lang:"en-US",frontmatter:{title:"AsyncData",date:"2021-07-08T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"第一个参数",slug:"第一个参数",children:[]}],git:{createdTime:1654755909e3,updatedTime:1654755909e3,contributors:[{name:"huying",email:"huying@wondertek.com.cn",commits:1}]},filePathRelative:"blogs/category1/2021/121501.md"}},1138:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<blockquote><p>Nuxt 异步请求数据生命周期</p></blockquote><h1 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h1><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token string">&#39;nuxt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个 API 在项目中是最常用的 API，服务端的请求都需要用到这个生命周期</p><h2 id="第一个参数" tabindex="-1"><a class="header-anchor" href="#第一个参数" aria-hidden="true">#</a> 第一个参数</h2><p>第一个参数为 context（这个参数我会专门有篇文章进行介绍的），官网的介绍也说了，这个生命周期是在服务器端或路由更新之前会被调用，一般是作为服务端渲染使用，可以利用这个生命周期函数返回数据给当前组件，记得要 return 哟。</p><blockquote><p>当然在服务端，这个生命周期是没有办法取到 this 对象，也没有办法取到实例的属性和方法的</p></blockquote>',7),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])}}]);